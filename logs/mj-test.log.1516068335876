INFO  03:04:28,023 - Compiling source file: C:\Users\Coa\Desktop\IR4PP1\projekat\sa100122dProjekatFX_Argon\workspace\MJCompiler\test\program.mj
INFO  03:04:28,030 - #33 program
INFO  03:04:28,031 - #1 Program
INFO  03:04:28,031 - #34 const
INFO  03:04:28,031 - #1 int
INFO  03:04:28,031 - #1 c
INFO  03:04:28,031 - #7 =
INFO  03:04:28,031 - #2 10
INFO  03:04:28,031 - #6 ;
INFO  03:04:28,031 - #34 const
INFO  03:04:28,031 - #1 int
INFO  03:04:28,032 - #1 d
INFO  03:04:28,032 - #7 =
INFO  03:04:28,032 - #2 99
INFO  03:04:28,032 - #14 ,
INFO  03:04:28,032 - #1 eps
INFO  03:04:28,032 - #7 =
INFO  03:04:28,032 - #2 2
INFO  03:04:28,032 - #6 ;
INFO  03:04:28,032 - #1 int
INFO  03:04:28,032 - #1 e
INFO  03:04:28,032 - #6 ;
INFO  03:04:28,033 - #29 {
INFO  03:04:28,033 - #35 void
INFO  03:04:28,033 - #1 test
INFO  03:04:28,033 - #10 (
INFO  03:04:28,033 - #11 )
INFO  03:04:28,033 - #1 int
INFO  03:04:28,033 - #1 a
INFO  03:04:28,033 - #14 ,
INFO  03:04:28,033 - #1 b
INFO  03:04:28,033 - #6 ;
INFO  03:04:28,033 - #1 bool
INFO  03:04:28,033 - #1 cond
INFO  03:04:28,033 - #6 ;
INFO  03:04:28,034 - #29 {
INFO  03:04:28,034 - #1 a
INFO  03:04:28,034 - #7 =
INFO  03:04:28,034 - #2 3
INFO  03:04:28,034 - #6 ;
INFO  03:04:28,034 - #1 b
INFO  03:04:28,034 - #7 =
INFO  03:04:28,034 - #2 5
INFO  03:04:28,034 - #6 ;
INFO  03:04:28,034 - #1 cond
INFO  03:04:28,034 - #7 =
INFO  03:04:28,034 - #4 true
INFO  03:04:28,034 - #6 ;
INFO  03:04:28,035 - #23 if
INFO  03:04:28,035 - #10 (
INFO  03:04:28,035 - #2 2
INFO  03:04:28,035 - #18 *
INFO  03:04:28,035 - #10 (
INFO  03:04:28,035 - #1 a
INFO  03:04:28,035 - #17 -
INFO  03:04:28,035 - #1 b
INFO  03:04:28,035 - #17 -
INFO  03:04:28,035 - #2 1
INFO  03:04:28,035 - #11 )
INFO  03:04:28,035 - #17 -
INFO  03:04:28,038 - #2 14
INFO  03:04:28,038 - #40 >
INFO  03:04:28,038 - #2 0
INFO  03:04:28,038 - #31 ||
INFO  03:04:28,038 - #1 cond
INFO  03:04:28,038 - #11 )
INFO  03:04:28,038 - #13 print
INFO  03:04:28,038 - #10 (
INFO  03:04:28,038 - #1 a
INFO  03:04:28,038 - #16 +
INFO  03:04:28,039 - #1 b
INFO  03:04:28,039 - #11 )
INFO  03:04:28,039 - #6 ;
INFO  03:04:28,039 - #30 }
INFO  03:04:28,039 - #1 int
INFO  03:04:28,039 - #1 max
INFO  03:04:28,039 - #10 (
INFO  03:04:28,039 - #1 int
INFO  03:04:28,039 - #1 a
INFO  03:04:28,039 - #14 ,
INFO  03:04:28,039 - #1 int
INFO  03:04:28,040 - #1 b
INFO  03:04:28,040 - #11 )
INFO  03:04:28,040 - #1 int
INFO  03:04:28,040 - #1 x
INFO  03:04:28,040 - #6 ;
INFO  03:04:28,040 - #29 {
INFO  03:04:28,040 - #23 if
INFO  03:04:28,040 - #10 (
INFO  03:04:28,040 - #1 a
INFO  03:04:28,040 - #40 >
INFO  03:04:28,040 - #1 b
INFO  03:04:28,040 - #11 )
INFO  03:04:28,040 - #29 {
INFO  03:04:28,041 - #36 return
INFO  03:04:28,041 - #1 a
INFO  03:04:28,041 - #6 ;
INFO  03:04:28,041 - #30 }
INFO  03:04:28,041 - #24 else
INFO  03:04:28,041 - #36 return
INFO  03:04:28,041 - #1 b
INFO  03:04:28,041 - #6 ;
INFO  03:04:28,041 - #30 }
INFO  03:04:28,041 - #1 int
INFO  03:04:28,041 - #1 min
INFO  03:04:28,041 - #10 (
INFO  03:04:28,042 - #1 int
INFO  03:04:28,042 - #1 a
INFO  03:04:28,042 - #14 ,
INFO  03:04:28,042 - #1 int
INFO  03:04:28,042 - #1 b
INFO  03:04:28,042 - #11 )
INFO  03:04:28,042 - #29 {
INFO  03:04:28,042 - #23 if
INFO  03:04:28,042 - #10 (
INFO  03:04:28,042 - #1 a
INFO  03:04:28,042 - #39 <
INFO  03:04:28,042 - #1 b
INFO  03:04:28,043 - #11 )
INFO  03:04:28,043 - #29 {
INFO  03:04:28,043 - #36 return
INFO  03:04:28,043 - #1 a
INFO  03:04:28,043 - #6 ;
INFO  03:04:28,043 - #30 }
INFO  03:04:28,043 - #24 else
INFO  03:04:28,043 - #29 {
INFO  03:04:28,043 - #36 return
INFO  03:04:28,043 - #1 b
INFO  03:04:28,043 - #6 ;
INFO  03:04:28,043 - #30 }
INFO  03:04:28,043 - #30 }
INFO  03:04:28,043 - #35 void
INFO  03:04:28,044 - #1 obrada
INFO  03:04:28,044 - #10 (
INFO  03:04:28,044 - #1 int
INFO  03:04:28,044 - #1 a
INFO  03:04:28,044 - #21 [
INFO  03:04:28,044 - #22 ]
INFO  03:04:28,044 - #14 ,
INFO  03:04:28,044 - #1 int
INFO  03:04:28,044 - #1 length
INFO  03:04:28,044 - #11 )
INFO  03:04:28,044 - #1 int
INFO  03:04:28,044 - #1 i
INFO  03:04:28,044 - #6 ;
INFO  03:04:28,044 - #29 {
INFO  03:04:28,044 - #1 i
INFO  03:04:28,044 - #7 =
INFO  03:04:28,045 - #2 0
INFO  03:04:28,045 - #6 ;
INFO  03:04:28,045 - #25 do
INFO  03:04:28,045 - #29 {
INFO  03:04:28,045 - #23 if
INFO  03:04:28,045 - #10 (
INFO  03:04:28,045 - #1 a
INFO  03:04:28,045 - #21 [
INFO  03:04:28,045 - #1 i
INFO  03:04:28,045 - #22 ]
INFO  03:04:28,045 - #20 %
INFO  03:04:28,045 - #2 3
INFO  03:04:28,045 - #37 ==
INFO  03:04:28,045 - #2 0
INFO  03:04:28,045 - #11 )
INFO  03:04:28,045 - #13 print
INFO  03:04:28,046 - #10 (
INFO  03:04:28,046 - #1 a
INFO  03:04:28,046 - #21 [
INFO  03:04:28,046 - #1 i
INFO  03:04:28,046 - #22 ]
INFO  03:04:28,046 - #11 )
INFO  03:04:28,046 - #6 ;
INFO  03:04:28,046 - #24 else
INFO  03:04:28,046 - #13 print
INFO  03:04:28,046 - #10 (
INFO  03:04:28,046 - #1 max
INFO  03:04:28,046 - #10 (
INFO  03:04:28,046 - #1 a
INFO  03:04:28,046 - #21 [
INFO  03:04:28,046 - #1 i
INFO  03:04:28,046 - #22 ]
INFO  03:04:28,046 - #14 ,
INFO  03:04:28,047 - #2 0
INFO  03:04:28,047 - #11 )
INFO  03:04:28,047 - #11 )
INFO  03:04:28,047 - #6 ;
INFO  03:04:28,047 - #1 i
INFO  03:04:28,047 - #8 ++
INFO  03:04:28,047 - #6 ;
INFO  03:04:28,047 - #30 }
INFO  03:04:28,047 - #26 while
INFO  03:04:28,047 - #10 (
INFO  03:04:28,047 - #1 i
INFO  03:04:28,047 - #39 <
INFO  03:04:28,047 - #1 length
INFO  03:04:28,047 - #11 )
INFO  03:04:28,048 - #6 ;
INFO  03:04:28,048 - #30 }
INFO  03:04:28,048 - #35 void
INFO  03:04:28,048 - #1 main
INFO  03:04:28,048 - #10 (
INFO  03:04:28,048 - #11 )
INFO  03:04:28,048 - #1 int
INFO  03:04:28,048 - #1 a
INFO  03:04:28,048 - #21 [
INFO  03:04:28,048 - #22 ]
INFO  03:04:28,048 - #14 ,
INFO  03:04:28,048 - #1 length
INFO  03:04:28,048 - #6 ;
INFO  03:04:28,048 - #1 int
INFO  03:04:28,048 - #1 i
INFO  03:04:28,048 - #6 ;
INFO  03:04:28,048 - #29 {
INFO  03:04:28,049 - #1 length
INFO  03:04:28,049 - #7 =
INFO  03:04:28,049 - #1 min
INFO  03:04:28,049 - #10 (
INFO  03:04:28,049 - #1 c
INFO  03:04:28,049 - #14 ,
INFO  03:04:28,049 - #2 103
INFO  03:04:28,049 - #11 )
INFO  03:04:28,049 - #6 ;
INFO  03:04:28,049 - #1 test
INFO  03:04:28,049 - #10 (
INFO  03:04:28,049 - #11 )
INFO  03:04:28,049 - #6 ;
INFO  03:04:28,049 - #23 if
INFO  03:04:28,049 - #10 (
INFO  03:04:28,050 - #1 length
INFO  03:04:28,050 - #40 >
INFO  03:04:28,050 - #2 0
INFO  03:04:28,050 - #32 &&
INFO  03:04:28,050 - #1 length
INFO  03:04:28,050 - #41 <=
INFO  03:04:28,050 - #1 d
INFO  03:04:28,050 - #11 )
INFO  03:04:28,050 - #1 a
INFO  03:04:28,050 - #7 =
INFO  03:04:28,050 - #15 new
INFO  03:04:28,050 - #1 int
INFO  03:04:28,050 - #21 [
INFO  03:04:28,050 - #1 length
INFO  03:04:28,050 - #22 ]
INFO  03:04:28,050 - #6 ;
INFO  03:04:28,051 - #24 else
INFO  03:04:28,051 - #1 a
INFO  03:04:28,051 - #7 =
INFO  03:04:28,051 - #15 new
INFO  03:04:28,051 - #1 int
INFO  03:04:28,051 - #21 [
INFO  03:04:28,051 - #2 5
INFO  03:04:28,051 - #22 ]
INFO  03:04:28,051 - #6 ;
INFO  03:04:28,051 - #25 do
INFO  03:04:28,051 - #29 {
INFO  03:04:28,051 - #12 read
INFO  03:04:28,051 - #10 (
INFO  03:04:28,052 - #1 a
INFO  03:04:28,052 - #21 [
INFO  03:04:28,052 - #1 i
INFO  03:04:28,052 - #22 ]
INFO  03:04:28,052 - #11 )
INFO  03:04:28,052 - #6 ;
INFO  03:04:28,052 - #30 }
INFO  03:04:28,052 - #26 while
INFO  03:04:28,052 - #10 (
INFO  03:04:28,052 - #1 i
INFO  03:04:28,052 - #41 <=
INFO  03:04:28,053 - #1 length
INFO  03:04:28,053 - #17 -
INFO  03:04:28,053 - #2 1
INFO  03:04:28,053 - #11 )
INFO  03:04:28,053 - #6 ;
INFO  03:04:28,053 - #1 obrada
INFO  03:04:28,053 - #10 (
INFO  03:04:28,053 - #1 a
INFO  03:04:28,053 - #14 ,
INFO  03:04:28,053 - #1 length
INFO  03:04:28,053 - #11 )
INFO  03:04:28,053 - #6 ;
INFO  03:04:28,053 - #13 print
INFO  03:04:28,053 - #10 (
INFO  03:04:28,053 - #1 d
INFO  03:04:28,053 - #11 )
INFO  03:04:28,053 - #6 ;
INFO  03:04:28,054 - #30 }
INFO  03:04:28,054 - #30 }
