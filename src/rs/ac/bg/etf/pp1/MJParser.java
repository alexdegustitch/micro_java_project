
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Dec 21 05:14:07 CET 2019
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import rs.ac.bg.etf.pp1.ast.*;
import java_cup.runtime.*;
import java_cup.parser;
import java.io.*;
import org.apache.log4j.*;

/** CUP v0.10k generated parser.
  * @version Sat Dec 21 05:14:07 CET 2019
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\003\010\000\002\002\004\000\002\003" +
    "\007\000\002\003\007\000\002\003\006\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\004\000\002\007\003\000\002" +
    "\010\006\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\013\005\000\002\014\005\000\002\014\003" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\012\000\002" +
    "\021\011\000\002\021\011\000\002\021\010\000\002\021" +
    "\011\000\002\021\010\000\002\021\010\000\002\021\007" +
    "\000\002\022\012\000\002\022\011\000\002\022\011\000" +
    "\002\022\010\000\002\022\011\000\002\022\010\000\002" +
    "\022\010\000\002\022\007\000\002\023\004\000\002\024" +
    "\004\000\002\026\005\000\002\026\003\000\002\025\006" +
    "\000\002\025\004\000\002\025\003\000\002\016\004\000" +
    "\002\016\003\000\002\027\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\035\004\000\002\035" +
    "\003\000\002\034\004\000\002\034\007\000\002\034\011" +
    "\000\002\034\007\000\002\034\006\000\002\034\004\000" +
    "\002\034\011\000\002\034\004\000\002\034\004\000\002" +
    "\034\005\000\002\034\004\000\002\034\005\000\002\034" +
    "\004\000\002\053\003\000\002\055\006\000\002\054\003" +
    "\000\002\036\005\000\002\036\003\000\002\031\003\000" +
    "\002\030\005\000\002\030\003\000\002\032\005\000\002" +
    "\032\003\000\002\033\005\000\002\033\003\000\002\037" +
    "\005\000\002\037\004\000\002\037\004\000\002\037\006" +
    "\000\002\037\005\000\002\040\005\000\002\040\004\000" +
    "\002\040\004\000\002\040\003\000\002\040\005\000\002" +
    "\040\003\000\002\041\004\000\002\041\003\000\002\042" +
    "\004\000\002\043\004\000\002\043\003\000\002\045\004" +
    "\000\002\045\003\000\002\046\004\000\002\044\003\000" +
    "\002\044\003\000\002\044\005\000\002\044\003\000\002" +
    "\044\004\000\002\044\007\000\002\044\006\000\002\044" +
    "\003\000\002\047\006\000\002\047\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\051\003\000\002" +
    "\051\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\004\004\005\001\002\000\004\002\343\001" +
    "\002\000\004\012\007\001\002\000\010\007\010\012\016" +
    "\025\017\001\002\000\010\007\ufffc\012\ufffc\025\ufffc\001" +
    "\002\000\004\012\016\001\002\000\010\007\ufff9\012\ufff9" +
    "\025\ufff9\001\002\000\010\007\010\012\016\025\323\001" +
    "\002\000\010\007\ufff8\012\ufff8\025\ufff8\001\002\000\006" +
    "\003\312\012\313\001\002\000\010\007\ufffa\012\ufffa\025" +
    "\ufffa\001\002\000\052\003\uffd0\012\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\027\uffd0\030" +
    "\uffd0\034\uffd0\035\uffd0\037\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\001\002\000\010\010\022\012" +
    "\016\026\026\001\002\000\010\010\uffea\012\uffea\026\uffea" +
    "\001\002\000\010\010\ufff6\012\ufff6\026\ufff6\001\002\000" +
    "\004\012\310\001\002\000\004\036\262\001\002\000\010" +
    "\010\uffeb\012\uffeb\026\uffeb\001\002\000\004\012\261\001" +
    "\002\000\004\002\ufffd\001\002\000\010\010\022\012\016" +
    "\026\260\001\002\000\004\036\031\001\002\000\010\003" +
    "\032\012\016\037\035\001\002\000\006\035\uffd3\037\uffd3" +
    "\001\002\000\004\012\254\001\002\000\006\035\240\037" +
    "\241\001\002\000\006\012\016\025\041\001\002\000\006" +
    "\035\uffd6\037\uffd6\001\002\000\006\012\uffd1\025\uffd1\001" +
    "\002\000\006\012\016\025\234\001\002\000\026\005\053" +
    "\006\042\012\043\025\054\026\052\040\047\042\060\044" +
    "\061\045\056\046\057\001\002\000\004\036\227\001\002" +
    "\000\056\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\027\224\030\uff95\031\uff95\032\uff95\033\uff95" +
    "\034\uff95\035\uff95\036\uff95\037\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\053\uff95\054\uff95\001\002\000\004\034\223" +
    "\001\002\000\004\036\214\001\002\000\012\031\204\032" +
    "\207\033\206\036\205\001\002\000\004\036\uffbd\001\002" +
    "\000\024\005\053\006\042\012\043\025\054\040\047\042" +
    "\060\044\061\045\056\046\057\001\002\000\026\005\uffcb" +
    "\006\uffcb\012\uffcb\025\uffcb\026\uffcb\040\uffcb\042\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\001\002\000\010\010\uffe2\012\uffe2" +
    "\026\uffe2\001\002\000\004\036\146\001\002\000\026\005" +
    "\053\006\042\012\043\025\054\026\143\040\047\042\060" +
    "\044\061\045\056\046\057\001\002\000\026\005\053\006" +
    "\042\012\043\025\054\026\142\040\047\042\060\044\061" +
    "\045\056\046\057\001\002\000\004\034\140\001\002\000" +
    "\024\003\074\011\064\012\043\013\070\014\072\015\071" +
    "\021\063\034\075\036\065\001\002\000\024\005\uffbb\006" +
    "\uffbb\012\uffbb\025\uffbb\040\uffbb\042\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\001\002\000\004\034\062\001\002\000\032\005" +
    "\uffc3\006\uffc3\012\uffc3\025\uffc3\026\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\001\002\000" +
    "\016\011\064\012\043\013\070\014\072\015\071\036\065" +
    "\001\002\000\004\012\016\001\002\000\022\003\074\011" +
    "\064\012\043\013\070\014\072\015\071\021\063\036\065" +
    "\001\002\000\036\016\uffa9\017\uffa9\020\122\021\124\030" +
    "\uffa9\034\uffa9\035\uffa9\037\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\001\002\000\046\016\uff97\017" +
    "\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\030\uff97" +
    "\034\uff97\035\uff97\036\117\037\uff97\047\uff97\050\uff97\051" +
    "\uff97\052\uff97\053\uff97\054\uff97\001\002\000\044\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\030" +
    "\uff9e\034\uff9e\035\uff9e\037\uff9e\047\uff9e\050\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\054\uff9e\001\002\000\044\016\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\030\uff9b" +
    "\034\uff9b\035\uff9b\037\uff9b\047\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\001\002\000\044\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\030\uff9d\034" +
    "\uff9d\035\uff9d\037\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\001\002\000\044\016\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\103\023\105\024\102\030\uffa2\034\uffa2" +
    "\035\uffa2\037\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\054\uffa2\001\002\000\032\016\uffa7\017\uffa7\030\uffa7" +
    "\034\uffa7\035\uffa7\037\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\001\002\000\032\005\uffc0\006\uffc0" +
    "\012\uffc0\025\uffc0\026\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\001\002\000\004\034\077" +
    "\001\002\000\032\005\uffc1\006\uffc1\012\uffc1\025\uffc1\026" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\001\002\000\044\016\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\030\uffa0\034\uffa0\035\uffa0" +
    "\037\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\001\002\000\016\011\064\012\043\013\070\014\072" +
    "\015\071\036\065\001\002\000\016\011\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\036\uff8a\001\002\000\016\011\uff8c" +
    "\012\uff8c\013\uff8c\014\uff8c\015\uff8c\036\uff8c\001\002\000" +
    "\044\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\103\023\105" +
    "\024\102\030\uffa3\034\uffa3\035\uffa3\037\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\001\002\000\016" +
    "\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\036\uff8b\001" +
    "\002\000\044\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\030\uffa1\034\uffa1\035\uffa1\037\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\001\002" +
    "\000\046\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\024\uff97\030\uff97\034\uff97\035\uff97\036\111\037\uff97" +
    "\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\001" +
    "\002\000\044\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\030\uff9f\034\uff9f\035\uff9f\037\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\001\002" +
    "\000\022\003\074\011\064\012\043\013\070\014\072\015" +
    "\071\021\063\036\065\001\002\000\006\035\uffb9\037\uffb9" +
    "\001\002\000\006\035\114\037\115\001\002\000\022\003" +
    "\074\011\064\012\043\013\070\014\072\015\071\021\063" +
    "\036\065\001\002\000\044\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\023\uff98\024\uff98\030\uff98\034\uff98\035\uff98" +
    "\037\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054" +
    "\uff98\001\002\000\006\035\uffba\037\uffba\001\002\000\024" +
    "\003\074\011\064\012\043\013\070\014\072\015\071\021" +
    "\063\036\065\037\120\001\002\000\032\016\uffa8\017\uffa8" +
    "\030\uffa8\034\uffa8\035\uffa8\037\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\054\uffa8\001\002\000\016\011\064" +
    "\012\043\013\070\014\072\015\071\036\065\001\002\000" +
    "\016\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\036\uff8e" +
    "\001\002\000\036\016\uffa5\017\uffa5\020\uffa5\021\uffa5\030" +
    "\uffa5\034\uffa5\035\uffa5\037\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\054\uffa5\001\002\000\016\011\uff8d\012" +
    "\uff8d\013\uff8d\014\uff8d\015\uff8d\036\uff8d\001\002\000\036" +
    "\016\uffaa\017\uffaa\020\122\021\124\030\uffaa\034\uffaa\035" +
    "\uffaa\037\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\001\002\000\036\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\030\uffa6\034\uffa6\035\uffa6\037\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\054\uffa6\001\002\000\036\016" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\030\uffa4\034\uffa4\035\uffa4" +
    "\037\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\001\002\000\004\037\131\001\002\000\044\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\030" +
    "\uff9c\034\uff9c\035\uff9c\037\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\001\002\000\046\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\027\133" +
    "\030\uff9a\034\uff9a\035\uff9a\037\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\001\002\000\022\003\074" +
    "\011\064\012\043\013\070\014\072\015\071\021\063\036" +
    "\065\001\002\000\004\030\135\001\002\000\044\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\030" +
    "\uff99\034\uff99\035\uff99\037\uff99\047\uff99\050\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\001\002\000\036\016\uffab\017" +
    "\uffab\020\122\021\124\030\uffab\034\uffab\035\uffab\037\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\001" +
    "\002\000\036\016\uffac\017\uffac\020\122\021\124\030\uffac" +
    "\034\uffac\035\uffac\037\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\001\002\000\032\005\uffc2\006\uffc2" +
    "\012\uffc2\025\uffc2\026\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000\026\005\uffcc" +
    "\006\uffcc\012\uffcc\025\uffcc\026\uffcc\040\uffcc\042\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\001\002\000\010\010\uffe3\012\uffe3" +
    "\026\uffe3\001\002\000\032\005\uffbe\006\uffbe\012\uffbe\025" +
    "\uffbe\026\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\001\002\000\026\005\053\006\042\012" +
    "\043\025\054\026\145\040\047\042\060\044\061\045\056" +
    "\046\057\001\002\000\032\005\uffbf\006\uffbf\012\uffbf\025" +
    "\uffbf\026\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\001\002\000\022\003\074\011\064\012" +
    "\043\013\070\014\072\015\071\021\063\036\065\001\002" +
    "\000\006\035\150\037\151\001\002\000\004\013\153\001" +
    "\002\000\004\034\152\001\002\000\032\005\uffc7\006\uffc7" +
    "\012\uffc7\025\uffc7\026\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000\004\037\154" +
    "\001\002\000\004\034\155\001\002\000\032\005\uffc8\006" +
    "\uffc8\012\uffc8\025\uffc8\026\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\001\002\000\004\043" +
    "\157\001\002\000\004\036\160\001\002\000\022\003\074" +
    "\011\064\012\043\013\070\014\072\015\071\021\063\036" +
    "\065\001\002\000\004\037\202\001\002\000\010\016\200" +
    "\017\uffb6\037\uffb6\001\002\000\006\017\176\037\uffb8\001" +
    "\002\000\024\016\uffb2\017\uffb2\037\uffb2\047\171\050\173" +
    "\051\170\052\172\053\166\054\167\001\002\000\010\016" +
    "\uffb4\017\uffb4\037\uffb4\001\002\000\022\003\uff90\011\uff90" +
    "\012\uff90\013\uff90\014\uff90\015\uff90\021\uff90\036\uff90\001" +
    "\002\000\022\003\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f" +
    "\015\uff8f\021\uff8f\036\uff8f\001\002\000\022\003\uff92\011" +
    "\uff92\012\uff92\013\uff92\014\uff92\015\uff92\021\uff92\036\uff92" +
    "\001\002\000\022\003\uff94\011\uff94\012\uff94\013\uff94\014" +
    "\uff94\015\uff94\021\uff94\036\uff94\001\002\000\022\003\uff91" +
    "\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\021\uff91\036" +
    "\uff91\001\002\000\022\003\uff93\011\uff93\012\uff93\013\uff93" +
    "\014\uff93\015\uff93\021\uff93\036\uff93\001\002\000\022\003" +
    "\074\011\064\012\043\013\070\014\072\015\071\021\063" +
    "\036\065\001\002\000\010\016\uffb3\017\uffb3\037\uffb3\001" +
    "\002\000\022\003\074\011\064\012\043\013\070\014\072" +
    "\015\071\021\063\036\065\001\002\000\010\016\200\017" +
    "\uffb7\037\uffb7\001\002\000\022\003\074\011\064\012\043" +
    "\013\070\014\072\015\071\021\063\036\065\001\002\000" +
    "\010\016\uffb5\017\uffb5\037\uffb5\001\002\000\004\034\203" +
    "\001\002\000\032\005\uffc4\006\uffc4\012\uffc4\025\uffc4\026" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\001\002\000\022\003\074\011\064\012\043\013" +
    "\070\014\072\015\071\021\063\036\065\001\002\000\024" +
    "\003\074\011\064\012\043\013\070\014\072\015\071\021" +
    "\063\036\065\037\210\001\002\000\004\034\uffaf\001\002" +
    "\000\004\034\uffb0\001\002\000\004\034\uffad\001\002\000" +
    "\006\035\114\037\212\001\002\000\004\034\uffae\001\002" +
    "\000\004\034\uffb1\001\002\000\022\003\074\011\064\012" +
    "\043\013\070\014\072\015\071\021\063\036\065\001\002" +
    "\000\032\005\uffc5\006\uffc5\012\uffc5\025\uffc5\026\uffc5\040" +
    "\uffc5\041\216\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\001\002\000\024\005\053\006\042\012\043\025\054\040" +
    "\047\042\060\044\061\045\056\046\057\001\002\000\032" +
    "\005\uffc6\006\uffc6\012\uffc6\025\uffc6\026\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\001\002" +
    "\000\004\037\221\001\002\000\024\005\053\006\042\012" +
    "\043\025\054\040\047\042\060\044\061\045\056\046\057" +
    "\001\002\000\032\005\uffbc\006\uffbc\012\uffbc\025\uffbc\026" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\001\002\000\032\005\uffca\006\uffca\012\uffca\025" +
    "\uffca\026\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\001\002\000\022\003\074\011\064\012" +
    "\043\013\070\014\072\015\071\021\063\036\065\001\002" +
    "\000\004\030\226\001\002\000\054\016\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\024\uff96\030\uff96\031\uff96" +
    "\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\047" +
    "\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\001\002" +
    "\000\004\012\043\001\002\000\004\037\231\001\002\000" +
    "\004\034\232\001\002\000\032\005\uffc9\006\uffc9\012\uffc9" +
    "\025\uffc9\026\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\001\002\000\006\012\uffd2\025\uffd2" +
    "\001\002\000\026\005\053\006\042\012\043\025\054\026" +
    "\235\040\047\042\060\044\061\045\056\046\057\001\002" +
    "\000\010\010\uffe4\012\uffe4\026\uffe4\001\002\000\026\005" +
    "\053\006\042\012\043\025\054\026\237\040\047\042\060" +
    "\044\061\045\056\046\057\001\002\000\010\010\uffe5\012" +
    "\uffe5\026\uffe5\001\002\000\006\003\032\012\016\001\002" +
    "\000\006\012\016\025\243\001\002\000\006\012\016\025" +
    "\247\001\002\000\026\005\053\006\042\012\043\025\054" +
    "\026\244\040\047\042\060\044\061\045\056\046\057\001" +
    "\002\000\010\010\uffe6\012\uffe6\026\uffe6\001\002\000\026" +
    "\005\053\006\042\012\043\025\054\026\246\040\047\042" +
    "\060\044\061\045\056\046\057\001\002\000\010\010\uffe7" +
    "\012\uffe7\026\uffe7\001\002\000\026\005\053\006\042\012" +
    "\043\025\054\026\250\040\047\042\060\044\061\045\056" +
    "\046\057\001\002\000\010\010\uffe8\012\uffe8\026\uffe8\001" +
    "\002\000\026\005\053\006\042\012\043\025\054\026\252" +
    "\040\047\042\060\044\061\045\056\046\057\001\002\000" +
    "\010\010\uffe9\012\uffe9\026\uffe9\001\002\000\006\035\uffd7" +
    "\037\uffd7\001\002\000\010\027\255\035\uffd4\037\uffd4\001" +
    "\002\000\004\030\256\001\002\000\006\035\uffd5\037\uffd5" +
    "\001\002\000\010\010\ufff7\012\ufff7\026\ufff7\001\002\000" +
    "\004\002\ufffe\001\002\000\004\036\uffd8\001\002\000\010" +
    "\003\032\012\016\037\264\001\002\000\006\035\240\037" +
    "\276\001\002\000\006\012\016\025\266\001\002\000\006" +
    "\012\016\025\272\001\002\000\026\005\053\006\042\012" +
    "\043\025\054\026\267\040\047\042\060\044\061\045\056" +
    "\046\057\001\002\000\010\010\uffda\012\uffda\026\uffda\001" +
    "\002\000\026\005\053\006\042\012\043\025\054\026\271" +
    "\040\047\042\060\044\061\045\056\046\057\001\002\000" +
    "\010\010\uffdb\012\uffdb\026\uffdb\001\002\000\026\005\053" +
    "\006\042\012\043\025\054\026\273\040\047\042\060\044" +
    "\061\045\056\046\057\001\002\000\010\010\uffdc\012\uffdc" +
    "\026\uffdc\001\002\000\026\005\053\006\042\012\043\025" +
    "\054\026\275\040\047\042\060\044\061\045\056\046\057" +
    "\001\002\000\010\010\uffdd\012\uffdd\026\uffdd\001\002\000" +
    "\006\012\016\025\300\001\002\000\006\012\016\025\304" +
    "\001\002\000\026\005\053\006\042\012\043\025\054\026" +
    "\301\040\047\042\060\044\061\045\056\046\057\001\002" +
    "\000\010\010\uffde\012\uffde\026\uffde\001\002\000\026\005" +
    "\053\006\042\012\043\025\054\026\303\040\047\042\060" +
    "\044\061\045\056\046\057\001\002\000\010\010\uffdf\012" +
    "\uffdf\026\uffdf\001\002\000\026\005\053\006\042\012\043" +
    "\025\054\026\305\040\047\042\060\044\061\045\056\046" +
    "\057\001\002\000\010\010\uffe0\012\uffe0\026\uffe0\001\002" +
    "\000\026\005\053\006\042\012\043\025\054\026\307\040" +
    "\047\042\060\044\061\045\056\046\057\001\002\000\010" +
    "\010\uffe1\012\uffe1\026\uffe1\001\002\000\004\036\uffd9\001" +
    "\002\000\006\034\320\035\317\001\002\000\006\034\uffec" +
    "\035\uffec\001\002\000\010\027\315\034\uffed\035\uffed\001" +
    "\002\000\006\034\uffef\035\uffef\001\002\000\004\030\316" +
    "\001\002\000\006\034\uffee\035\uffee\001\002\000\006\003" +
    "\312\012\313\001\002\000\010\007\ufff1\012\ufff1\025\ufff1" +
    "\001\002\000\006\034\ufff0\035\ufff0\001\002\000\010\007" +
    "\ufffb\012\ufffb\025\ufffb\001\002\000\010\010\022\012\016" +
    "\026\324\001\002\000\004\002\uffff\001\002\000\010\010" +
    "\022\012\016\026\326\001\002\000\004\002\001\001\002" +
    "\000\004\012\331\001\002\000\006\034\341\035\340\001" +
    "\002\000\004\031\333\001\002\000\006\034\ufff3\035\ufff3" +
    "\001\002\000\010\013\335\014\337\015\334\001\002\000" +
    "\006\034\uffcd\035\uffcd\001\002\000\006\034\uffcf\035\uffcf" +
    "\001\002\000\006\034\ufff2\035\ufff2\001\002\000\006\034" +
    "\uffce\035\uffce\001\002\000\004\012\331\001\002\000\010" +
    "\007\ufff5\012\ufff5\025\ufff5\001\002\000\006\034\ufff4\035" +
    "\ufff4\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\004\005\001\001\000\014\005\011\006\014\010\010" +
    "\013\012\027\013\001\001\000\002\001\001\000\004\027" +
    "\326\001\001\000\002\001\001\000\012\006\321\010\010" +
    "\013\012\027\013\001\001\000\002\001\001\000\006\014" +
    "\310\015\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\026\020\020\021\023\022\017\023\027\024" +
    "\022\027\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\256\021\023" +
    "\022\017\023\027\024\022\027\024\001\001\000\002\001" +
    "\001\000\010\025\035\026\033\027\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\036\016\037\027\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\232\027\013\001\001\000\016\034" +
    "\050\035\054\037\043\047\045\053\044\054\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\034\155\037\043\047\045\053\044\054\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\034\050\035\143\037\043\047\045\053\044\054" +
    "\047\001\001\000\014\034\140\037\043\047\045\053\044" +
    "\054\047\001\001\000\002\001\001\000\012\040\075\043" +
    "\065\044\072\047\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\043\135\044\072\047" +
    "\106\001\001\000\004\027\131\001\001\000\012\040\127" +
    "\043\065\044\072\047\066\001\001\000\010\041\124\042" +
    "\122\051\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\045\103\046" +
    "\077\052\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\107\047\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\046\105\052\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\036\112\040\111\043\065\044\072\047\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\040\115" +
    "\043\065\044\072\047\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\036\112\040\111\043\065\044\072" +
    "\047\066\001\001\000\002\001\001\000\010\043\126\044" +
    "\072\047\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\125\051\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\040\133\043\065\044" +
    "\072\047\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\041\136\042\122\051\120\001\001\000\006\042" +
    "\125\051\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\034\140\037" +
    "\043\047\045\053\044\054\047\001\001\000\002\001\001" +
    "\000\012\040\146\043\065\044\072\047\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\162" +
    "\031\160\032\161\033\164\040\163\043\065\044\072\047" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\040" +
    "\174\043\065\044\072\047\066\001\001\000\002\001\001" +
    "\000\016\032\176\033\164\040\163\043\065\044\072\047" +
    "\066\001\001\000\002\001\001\000\014\033\200\040\163" +
    "\043\065\044\072\047\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\040\212\043\065" +
    "\044\072\047\066\001\001\000\014\036\210\040\111\043" +
    "\065\044\072\047\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\030\162\031\217\032\161" +
    "\033\164\040\163\043\065\044\072\047\066\001\001\000" +
    "\002\001\001\000\014\034\216\037\043\047\045\053\044" +
    "\054\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\034\221\037\043\047\045\053\044\054\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\040\224\043" +
    "\065\044\072\047\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\034\050\035\235\037\043\047\045\053\044\054\047\001" +
    "\001\000\002\001\001\000\014\034\140\037\043\047\045" +
    "\053\044\054\047\001\001\000\002\001\001\000\006\025" +
    "\252\027\032\001\001\000\010\013\036\016\241\027\013" +
    "\001\001\000\006\013\232\027\013\001\001\000\016\034" +
    "\050\035\244\037\043\047\045\053\044\054\047\001\001" +
    "\000\002\001\001\000\014\034\140\037\043\047\045\053" +
    "\044\054\047\001\001\000\002\001\001\000\016\034\050" +
    "\035\250\037\043\047\045\053\044\054\047\001\001\000" +
    "\002\001\001\000\014\034\140\037\043\047\045\053\044" +
    "\054\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\035\026\262\027\032\001\001\000\002\001\001\000\010" +
    "\013\036\016\264\027\013\001\001\000\006\013\232\027" +
    "\013\001\001\000\016\034\050\035\267\037\043\047\045" +
    "\053\044\054\047\001\001\000\002\001\001\000\014\034" +
    "\140\037\043\047\045\053\044\054\047\001\001\000\002" +
    "\001\001\000\016\034\050\035\273\037\043\047\045\053" +
    "\044\054\047\001\001\000\002\001\001\000\014\034\140" +
    "\037\043\047\045\053\044\054\047\001\001\000\002\001" +
    "\001\000\010\013\036\016\276\027\013\001\001\000\006" +
    "\013\232\027\013\001\001\000\016\034\050\035\301\037" +
    "\043\047\045\053\044\054\047\001\001\000\002\001\001" +
    "\000\014\034\140\037\043\047\045\053\044\054\047\001" +
    "\001\000\002\001\001\000\016\034\050\035\305\037\043" +
    "\047\045\053\044\054\047\001\001\000\002\001\001\000" +
    "\014\034\140\037\043\047\045\053\044\054\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\324\020\020\021\023\022\017\023\027\024\022\027" +
    "\024\001\001\000\002\001\001\000\016\020\256\021\023" +
    "\022\017\023\027\024\022\027\024\001\001\000\002\001" +
    "\001\000\006\011\327\012\331\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\335\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	currSymbol = this.getScanner().next_token();
	if (currSymbol != null && currSymbol.value != null) {
		log.info(currSymbol.toString() + " " + currSymbol.value.toString());
	}
	return currSymbol;

    }


	
	private boolean errorDetected = false;
	private Symbol currSymbol = null;		
	private Symbol errorSymbol = null;
	
	private Logger log = Logger.getLogger(getClass());
      
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Sintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {			
			errorSymbol = (Symbol) info;
            msg.append(" na liniji ").append(errorSymbol.left);
			msg.append(", koloni ").append(errorSymbol.right);
			if (errorSymbol.value != null) {
				msg.append(" za simbol \"").append(errorSymbol.value.toString()).append("\"");
			}			
			msg.append("!");
		}
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
            msg.append(" na liniji ").append(((Symbol)info).left);
			msg.append(", koloni ").append(((Symbol)info).right);
			if (errorSymbol.value != null) {
				msg.append(" za simbol \"").append(((Symbol)info).value.toString()).append("\"");
			}
		}
        log.info(msg.toString());
    }
	
	public boolean isErrorDetected() {
		return errorDetected;
	}
    
	public Symbol getCurrSymbol() {
		return currSymbol;
	}
	
	public Symbol getErrorSymbol() {
		return errorSymbol;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // mul_op ::= MODULO 
            {
              Mul_op RESULT = null;
		 RESULT=new Mul_op_mod(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*mul_op*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // mul_op ::= DIVISION 
            {
              Mul_op RESULT = null;
		 RESULT=new Mul_op_div(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*mul_op*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // mul_op ::= MULTIPLICATION 
            {
              Mul_op RESULT = null;
		 RESULT=new Mul_op_mul(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*mul_op*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // add_op ::= MINUS 
            {
              Add_op RESULT = null;
		 RESULT=new Add_op_minus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*add_op*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // add_op ::= PLUS 
            {
              Add_op RESULT = null;
		 RESULT=new Add_op_plus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*add_op*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // rel_op ::= NOT_EQUAL 
            {
              Rel_op RESULT = null;
		 RESULT=new Rel_op_ne(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*rel_op*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // rel_op ::= LESSER_EQUAL 
            {
              Rel_op RESULT = null;
		 RESULT=new Rel_op_le(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*rel_op*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // rel_op ::= GREATER_EQUAL 
            {
              Rel_op RESULT = null;
		 RESULT=new Rel_op_ge(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*rel_op*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // rel_op ::= LESSER 
            {
              Rel_op RESULT = null;
		 RESULT=new Rel_op_lt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*rel_op*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // rel_op ::= EQUAL 
            {
              Rel_op RESULT = null;
		 RESULT=new Rel_op_eq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*rel_op*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // rel_op ::= GREATER 
            {
              Rel_op RESULT = null;
		 RESULT=new Rel_op_gt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*rel_op*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // designator ::= IDENT 
            {
              Designator RESULT = null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Designator_1(ID); RESULT.setLine(IDleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // designator ::= IDENT LEFT_SQUARE expr RIGHT_SQUARE 
            {
              Designator RESULT = null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Designator_0(ID, e1); RESULT.setLine(IDleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor ::= designator 
            {
              Factor RESULT = null;
		int DESIGNleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int DESIGNright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator DESIGN = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Factor_designator(DESIGN); RESULT.setLine(DESIGNleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor ::= designator LEFT_PARENTHESIS act_pars RIGHT_PARENTHESIS 
            {
              Factor RESULT = null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator methodName = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Act_pars a1 = (Act_pars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Factor_meth_call(methodName, a1); RESULT.setLine(methodNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // factor ::= NEW type LEFT_SQUARE expr RIGHT_SQUARE 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Factor_new_array(t1, e2); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // factor ::= NEW type 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Factor_new(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // factor ::= BOOL_CONST 
            {
              Factor RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean B1 = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Factor_bool_const(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Factor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Factor_expr(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= CHAR_CONST 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Factor_char_const(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= NUM_CONST 
            {
              Factor RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Factor_num_const(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // more_factor_part ::= mul_op factor 
            {
              More_factor_part RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mul_op m1 = (Mul_op)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor f2 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new More_factor_part(m1, f2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*more_factor_part*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // more_factor_list ::= more_factor_part 
            {
              More_factor_list RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		More_factor_part m1 = (More_factor_part)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new More_factor_single(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*more_factor_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // more_factor_list ::= more_factor_list more_factor_part 
            {
              More_factor_list RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		More_factor_list m1 = (More_factor_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		More_factor_part m2 = (More_factor_part)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new More_factor_multi(m1, m2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*more_factor_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // term ::= factor 
            {
              Term RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor f1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Term_single(f1); RESULT.setLine(f1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // term ::= factor more_factor_list 
            {
              Term RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Factor f1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		More_factor_list m2 = (More_factor_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Term_multi(f1, m2); RESULT.setLine(f1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // more_term_part ::= add_op term 
            {
              More_term_part RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Add_op a1 = (Add_op)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new More_term_part(a1, t2); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*more_term_part*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // more_term_list ::= more_term_part 
            {
              More_term_list RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		More_term_part m1 = (More_term_part)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new More_term_single(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*more_term_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // more_term_list ::= more_term_list more_term_part 
            {
              More_term_list RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		More_term_list m1 = (More_term_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		More_term_part m2 = (More_term_part)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new More_term_multi(m1, m2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*more_term_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= error 
            {
              Expr RESULT = null;
		 this.parser.report_error("Sintaksna greska - neispravan izraz", this.parser.getErrorSymbol());  RESULT=new Expr_error(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= designator LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Expr RESULT = null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator methodName = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Expr_meth_call(methodName); RESULT.setLine(methodNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= term 
            {
              Expr RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Expr_term_single(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= term more_term_list 
            {
              Expr RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		More_term_list m2 = (More_term_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Expr_term_multi(t1, m2); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= MINUS term 
            {
              Expr RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Expr_neg_term_single(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= MINUS term more_term_list 
            {
              Expr RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		More_term_list m2 = (More_term_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Expr_neg_term_multi(t1, m2); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // designator_statement ::= designator LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Designator_statement RESULT = null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator methodName = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Method_call_1(methodName); RESULT.setLine(methodNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*designator_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // designator_statement ::= designator LEFT_PARENTHESIS act_pars RIGHT_PARENTHESIS 
            {
              Designator_statement RESULT = null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator methodName = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Act_pars a1 = (Act_pars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Method_call_0(methodName, a1); RESULT.setLine(methodNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*designator_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // designator_statement ::= designator DECREMENT 
            {
              Designator_statement RESULT = null;
		int DESIGNleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int DESIGNright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator DESIGN = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Decrement(DESIGN); RESULT.setLine(DESIGNleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*designator_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // designator_statement ::= designator INCREMENT 
            {
              Designator_statement RESULT = null;
		int DESIGNleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int DESIGNright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator DESIGN = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Increment(DESIGN); RESULT.setLine(DESIGNleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*designator_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // designator_statement ::= designator ASSIGNMENT expr 
            {
              Designator_statement RESULT = null;
		int DESIGNleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int DESIGNright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator DESIGN = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int EXPRESSIONleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int EXPRESSIONright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr EXPRESSION = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Assignment(DESIGN, EXPRESSION); RESULT.setLine(DESIGNleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*designator_statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond_fact ::= expr 
            {
              Cond_fact RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Cond_fact_one(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*cond_fact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond_fact ::= expr rel_op expr 
            {
              Cond_fact RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Rel_op r2 = (Rel_op)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Cond_fact_two(e1, r2, e3); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*cond_fact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cond_term ::= cond_fact 
            {
              Cond_term RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Cond_fact c1 = (Cond_fact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Cond_term_one(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*cond_term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cond_term ::= cond_term AND cond_fact 
            {
              Cond_term RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Cond_term c1 = (Cond_term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Cond_fact c2 = (Cond_fact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Cond_term_two(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*cond_term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cond ::= cond_term 
            {
              Cond RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Cond_term c1 = (Cond_term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition_one(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*cond*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cond ::= cond OR cond_term 
            {
              Cond RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Cond c1 = (Cond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Cond_term c2 = (Cond_term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition_two(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*cond*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condition ::= cond 
            {
              Condition RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Cond c1 = (Cond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // act_pars ::= expr 
            {
              Act_pars RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Act_Pars_Single(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*act_pars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // act_pars ::= act_pars COMMA expr 
            {
              Act_pars RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Act_pars a1 = (Act_pars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Act_Pars_Multi(a1, e2); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*act_pars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmt_kw_do ::= DO 
            {
              Stmt_kw_do RESULT = null;
		 RESULT=new Stmt_kw_do(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*stmt_kw_do*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmt_if_body ::= LEFT_PARENTHESIS condition RIGHT_PARENTHESIS statement 
            {
              Stmt_if_body RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Stmt_if_body(c1, s2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*stmt_if_body*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmt_kw_if ::= IF 
            {
              Stmt_kw_if RESULT = null;
		 RESULT=new Stmt_kw_if(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*stmt_kw_if*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= LEFT_BRACE RIGHT_BRACE 
            {
              Statement RESULT = null;
		 RESULT=new Stmt_braces(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= LEFT_BRACE statement_list RIGHT_BRACE 
            {
              Statement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s1 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Stmt_list(s1); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= RETURN SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new Stmt_return(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= RETURN expr SEMICOLON 
            {
              Statement RESULT = null;
		int EXPRESSIONleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int EXPRESSIONright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr EXPRESSION = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Stmt_return_val(EXPRESSION); RESULT.setLine(EXPRESSIONleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new Stmt_continue(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= BREAK SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT=new Stmt_break(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= stmt_kw_do statement WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS SEMICOLON 
            {
              Statement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Stmt_kw_do s1 = (Stmt_kw_do)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int c3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition c3 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Stmt_do_while(s1, s2, c3); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= stmt_kw_if stmt_if_body 
            {
              Statement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Stmt_kw_if s1 = (Stmt_kw_if)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Stmt_if_body s2 = (Stmt_if_body)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Stmt_if(s1, s2); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= stmt_kw_if stmt_if_body ELSE statement 
            {
              Statement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Stmt_kw_if s1 = (Stmt_kw_if)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Stmt_if_body s2 = (Stmt_if_body)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement s3 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Stmt_if_else(s1, s2, s3); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= PRINT LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMICOLON 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Stmt_print_1(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= PRINT LEFT_PARENTHESIS expr COMMA NUM_CONST RIGHT_PARENTHESIS SEMICOLON 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer N2 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Stmt_print_0(e1, N2); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= READ LEFT_PARENTHESIS designator RIGHT_PARENTHESIS SEMICOLON 
            {
              Statement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Stmt_Read(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= designator_statement SEMICOLON 
            {
              Statement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator_statement d1 = (Designator_statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Stmt_design(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement_list ::= statement 
            {
              Statement_list RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Statement_single(s1); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*statement_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement_list ::= statement_list statement 
            {
              Statement_list RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s1 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Statement_multi(s1, s2); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*statement_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= BOOL_CONST 
            {
              Value RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean B1 = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Val_Bool_const(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*value*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= CHAR_CONST 
            {
              Value RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Val_Char_const(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*value*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= NUM_CONST 
            {
              Value RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Val_Num_const(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*value*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= IDENT 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var_declaration_list ::= var_declaration 
            {
              Var_declaration_list RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var_declaration v1 = (Var_declaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Var_decl_single(v1); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*var_declaration_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var_declaration_list ::= var_declaration_list var_declaration 
            {
              Var_declaration_list RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Var_declaration_list v1 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var_declaration v2 = (Var_declaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Var_decl_multi(v1, v2); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*var_declaration_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_parameter ::= error 
            {
              Method_parameter RESULT = null;
		 this.parser.report_error("Sintaksna greska - neispravni formalni parametri funkcije", this.parser.getErrorSymbol());  RESULT=new Param_error(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*method_parameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_parameter ::= type IDENT 
            {
              Method_parameter RESULT = null;
		int paramTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int paramTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type paramType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Param_normal(paramType, paramName); RESULT.setLine(paramTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*method_parameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_parameter ::= type IDENT LEFT_SQUARE RIGHT_SQUARE 
            {
              Method_parameter RESULT = null;
		int paramTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int paramTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type paramType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Param_array(paramType, paramName); RESULT.setLine(paramTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*method_parameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // method_parameters ::= method_parameter 
            {
              Method_parameters RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Method_parameter m1 = (Method_parameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Param_single(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*method_parameters*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // method_parameters ::= method_parameters COMMA method_parameter 
            {
              Method_parameters RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Method_parameters m1 = (Method_parameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Method_parameter m2 = (Method_parameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Param_multi(m1, m2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*method_parameters*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // method_type_name ::= type IDENT 
            {
              Method_type_name RESULT = null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Method_type_name(returnType, methodName); RESULT.setLine(returnTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*method_type_name*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // method_void_name ::= VOID IDENT 
            {
              Method_void_name RESULT = null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Method_void_name(methodName); RESULT.setLine(methodNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*method_void_name*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method_type_decl ::= method_type_name LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_BRACE RIGHT_BRACE 
            {
              Method_type_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Method_type_name m1 = (Method_type_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 RESULT=new Meth_type_7(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*method_type_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_type_decl ::= method_type_name LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_BRACE statement_list RIGHT_BRACE 
            {
              Method_type_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Method_type_name m1 = (Method_type_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s2 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Meth_type_6(m1, s2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*method_type_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_type_decl ::= method_type_name LEFT_PARENTHESIS RIGHT_PARENTHESIS var_declaration_list LEFT_BRACE RIGHT_BRACE 
            {
              Method_type_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Method_type_name m1 = (Method_type_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Var_declaration_list v2 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Meth_type_5(m1, v2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*method_type_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // method_type_decl ::= method_type_name LEFT_PARENTHESIS RIGHT_PARENTHESIS var_declaration_list LEFT_BRACE statement_list RIGHT_BRACE 
            {
              Method_type_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Method_type_name m1 = (Method_type_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Var_declaration_list v2 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s3 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Meth_type_4(m1, v2, s3); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*method_type_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // method_type_decl ::= method_type_name LEFT_PARENTHESIS method_parameters RIGHT_PARENTHESIS LEFT_BRACE RIGHT_BRACE 
            {
              Method_type_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Method_type_name m1 = (Method_type_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Method_parameters m2 = (Method_parameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 RESULT=new Meth_type_3(m1, m2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*method_type_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_type_decl ::= method_type_name LEFT_PARENTHESIS method_parameters RIGHT_PARENTHESIS LEFT_BRACE statement_list RIGHT_BRACE 
            {
              Method_type_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Method_type_name m1 = (Method_type_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Method_parameters m2 = (Method_parameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s3 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Meth_type_2(m1, m2, s3); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*method_type_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // method_type_decl ::= method_type_name LEFT_PARENTHESIS method_parameters RIGHT_PARENTHESIS var_declaration_list LEFT_BRACE RIGHT_BRACE 
            {
              Method_type_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Method_type_name m1 = (Method_type_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Method_parameters m2 = (Method_parameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Var_declaration_list v3 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Meth_type_1(m1, m2, v3); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*method_type_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method_type_decl ::= method_type_name LEFT_PARENTHESIS method_parameters RIGHT_PARENTHESIS var_declaration_list LEFT_BRACE statement_list RIGHT_BRACE 
            {
              Method_type_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Method_type_name m1 = (Method_type_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Method_parameters m2 = (Method_parameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Var_declaration_list v3 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s4 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Meth_type_0(m1, m2, v3, s4); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*method_type_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // method_void_decl ::= method_void_name LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_BRACE RIGHT_BRACE 
            {
              Method_void_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Method_void_name m1 = (Method_void_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 RESULT=new Meth_void_7(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*method_void_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // method_void_decl ::= method_void_name LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_BRACE statement_list RIGHT_BRACE 
            {
              Method_void_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Method_void_name m1 = (Method_void_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s2 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Meth_void_6(m1, s2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*method_void_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method_void_decl ::= method_void_name LEFT_PARENTHESIS RIGHT_PARENTHESIS var_declaration_list LEFT_BRACE RIGHT_BRACE 
            {
              Method_void_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Method_void_name m1 = (Method_void_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Var_declaration_list v2 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Meth_void_5(m1, v2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*method_void_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method_void_decl ::= method_void_name LEFT_PARENTHESIS RIGHT_PARENTHESIS var_declaration_list LEFT_BRACE statement_list RIGHT_BRACE 
            {
              Method_void_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Method_void_name m1 = (Method_void_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Var_declaration_list v2 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s3 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Meth_void_4(m1, v2, s3); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*method_void_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_void_decl ::= method_void_name LEFT_PARENTHESIS method_parameters RIGHT_PARENTHESIS LEFT_BRACE RIGHT_BRACE 
            {
              Method_void_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Method_void_name m1 = (Method_void_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Method_parameters m2 = (Method_parameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 RESULT=new Meth_void_3(m1, m2); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*method_void_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method_void_decl ::= method_void_name LEFT_PARENTHESIS method_parameters RIGHT_PARENTHESIS LEFT_BRACE statement_list RIGHT_BRACE 
            {
              Method_void_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Method_void_name m1 = (Method_void_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Method_parameters m2 = (Method_parameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s3 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Meth_void_2(m1, m2, s3); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*method_void_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_void_decl ::= method_void_name LEFT_PARENTHESIS method_parameters RIGHT_PARENTHESIS var_declaration_list LEFT_BRACE RIGHT_BRACE 
            {
              Method_void_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Method_void_name m1 = (Method_void_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Method_parameters m2 = (Method_parameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Var_declaration_list v3 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Meth_void_1(m1, m2, v3); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*method_void_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // method_void_decl ::= method_void_name LEFT_PARENTHESIS method_parameters RIGHT_PARENTHESIS var_declaration_list LEFT_BRACE statement_list RIGHT_BRACE 
            {
              Method_void_decl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Method_void_name m1 = (Method_void_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Method_parameters m2 = (Method_parameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Var_declaration_list v3 = (Var_declaration_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement_list s4 = (Statement_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Meth_void_0(m1, m2, v3, s4); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*method_void_decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method_declaration ::= method_type_decl 
            {
              Method_declaration RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Method_type_decl m1 = (Method_type_decl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Meth_type_decl(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*method_declaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method_declaration ::= method_void_decl 
            {
              Method_declaration RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Method_void_decl m1 = (Method_void_decl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Meth_void_decl(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*method_declaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_part ::= error 
            {
              Var_part RESULT = null;
		 this.parser.report_error("Sintaksna greska - neispravna definicija promenljive", this.parser.getErrorSymbol());  RESULT=new Var_error(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*var_part*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_part ::= IDENT 
            {
              Var_part RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Var_normal(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*var_part*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_part ::= IDENT LEFT_SQUARE RIGHT_SQUARE 
            {
              Var_part RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Var_array(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*var_part*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_list ::= var_part 
            {
              Var_list RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var_part v1 = (Var_part)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Var_single(v1); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*var_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_list ::= var_list COMMA var_part 
            {
              Var_list RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Var_list v1 = (Var_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var_part v2 = (Var_part)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Var_multi(v1, v2); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*var_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_declaration ::= type var_list SEMICOLON 
            {
              Var_declaration RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Var_list v1 = (Var_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Var_declaration(varType, v1); RESULT.setLine(varTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*var_declaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // const_part ::= IDENT ASSIGNMENT value 
            {
              Const_part RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Value constValue = (Value)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Const_part(constName, constValue); RESULT.setLine(constNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*const_part*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // const_list ::= const_part 
            {
              Const_list RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Const_part c1 = (Const_part)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Const_single(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*const_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // const_list ::= const_list COMMA const_part 
            {
              Const_list RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Const_list c1 = (Const_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Const_part c2 = (Const_part)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Const_multi(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*const_list*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const_declaration ::= CONST type const_list SEMICOLON 
            {
              Const_declaration RESULT = null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type constType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Const_list c1 = (Const_list)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Const_declaration(constType, c1); RESULT.setLine(constTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*const_declaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program_methods ::= method_declaration 
            {
              Program_methods RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Method_declaration m1 = (Method_declaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Program_methods_single(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*program_methods*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program_methods ::= program_methods method_declaration 
            {
              Program_methods RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program_methods p1 = (Program_methods)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Method_declaration m2 = (Method_declaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Program_methods_multi(p1, m2); RESULT.setLine(p1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*program_methods*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program_con_var ::= var_declaration 
            {
              Program_con_var RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var_declaration v1 = (Var_declaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Part_var_decl(v1); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*program_con_var*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program_con_var ::= const_declaration 
            {
              Program_con_var RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Const_declaration c1 = (Const_declaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Part_const_decl(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*program_con_var*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program_con_vars ::= program_con_var 
            {
              Program_con_vars RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Program_con_var p1 = (Program_con_var)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Program_con_vars_single(p1); RESULT.setLine(p1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*program_con_vars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_con_vars ::= program_con_vars program_con_var 
            {
              Program_con_vars RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program_con_vars p1 = (Program_con_vars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Program_con_var p2 = (Program_con_var)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Program_con_vars_multi(p1, p2); RESULT.setLine(p1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*program_con_vars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_name ::= IDENT 
            {
              Program_name RESULT = null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Program_name(programName); RESULT.setLine(programNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*program_name*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= PROGRAM program_name LEFT_BRACE RIGHT_BRACE 
            {
              Program RESULT = null;
		int prg_nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int prg_nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Program_name prg_name = (Program_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Program_3(prg_name); RESULT.setLine(prg_nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM program_name LEFT_BRACE program_methods RIGHT_BRACE 
            {
              Program RESULT = null;
		int prg_nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int prg_nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Program_name prg_name = (Program_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program_methods p1 = (Program_methods)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program_2(prg_name, p1); RESULT.setLine(prg_nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM program_name program_con_vars LEFT_BRACE RIGHT_BRACE 
            {
              Program RESULT = null;
		int prg_nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int prg_nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Program_name prg_name = (Program_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Program_con_vars p1 = (Program_con_vars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Program_1(prg_name, p1); RESULT.setLine(prg_nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM program_name program_con_vars LEFT_BRACE program_methods RIGHT_BRACE 
            {
              Program RESULT = null;
		int prg_nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int prg_nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Program_name prg_name = (Program_name)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Program_con_vars p1 = (Program_con_vars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program_methods p2 = (Program_methods)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program_0(prg_name, p1, p2); RESULT.setLine(prg_nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

